// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//--------------------------------------------------
// 1. 사용자 관련 스키마
// 1-1. 유저(입주민)
model User {
  id            String         @id
  pwd           String
  name          String
  phone         String         @unique
  email         String         @unique
  gender        Gender
  birth         DateTime
  pushAgree     Boolean        @default(true)
  isAccept      Boolean        @default(false)
  signUpAt      DateTime       @default(now())
  houseId       Int
  household     Household      @relation(references: [houseId], fields: [houseId])
  likes         Likes[]
  posts         Post[]
  reples        Reple[]
  complaints    Complaint[]
  chattingRooms ChattingRoom[]
  userVotes     UserVote[]

  @@index([houseId])
}

// 1-2. 가구
model Household {
  houseId   Int       @id @default(autoincrement())
  aptHo     Int
  aptDong   Int
  moveInAt  DateTime  @default(now())
  holder    String
  apartment Apartment @relation(references: [aptDong], fields: [aptDong])
  fares     Fare[]
  users     User[]
  cars      Car[]

  @@unique([aptHo, aptDong])
  @@index([aptDong])
}

// 1-3. 아파트 동
model Apartment {
  aptDong        Int         @id
  representative String?     @default("공석")
  households     Household[]
}

// 1-4. 직원
model Staff {
  id  String @id
  pwd String
}

//--------------------------------------------------
// 2. 핵심 기능 관련 스키마
// 2-1. 요금
model Fare {
  fareId                Int       @id @default(autoincrement())
  houseId               Int
  fareAt                DateTime  @default(now())
  isPaid                Boolean   @default(false)
  paidAt                DateTime? @updatedAt
  heating               Int
  water                 Int
  commonElectricity     Int
  elevatorElectricity   Int
  householdWaste        Int
  management            Int
  representative        Int
  buildingInsurance     Int
  expenses              Int
  disinfection          Int
  consignmentManagement Int
  longTermRepairs       Int
  household             Household @relation(references: [houseId], fields: [houseId], onDelete: Cascade, onUpdate: Cascade)

  @@index([houseId])
}

// 2-2. 차량
model Car {
  number     String    @id
  houseId    Int
  carName    String
  owner      String
  ownerPhone String
  enrollAt   DateTime? @updatedAt
  applyAt    DateTime  @default(now())
  isAccept   Boolean   @default(false)
  isGuest    Boolean   @default(false)
  household  Household @relation(references: [houseId], fields: [houseId], onDelete: Cascade, onUpdate: Cascade)

  @@index([houseId])
}

// 2-3. 게시글 & 댓글 & 좋아요 게시글
model Post {
  postId    Int        @id @default(autoincrement())
  title     String
  id        String?
  content   String     @db.MediumText
  postAt    DateTime   @default(now())
  isNotice  Boolean    @default(false)
  users     User?      @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: Cascade)
  reples    Reple[]
  likes     Likes[]
  postFiles PostFile[]

  @@index([id, postId])
}

model Reple {
  repleId Int      @id @default(autoincrement())
  postId  Int
  id      String
  content String
  repleAt DateTime @default(now())
  post    Post     @relation(references: [postId], fields: [postId], onDelete: Cascade, onUpdate: Cascade)
  users   User     @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id])
  @@index([postId])
}

model Likes {
  index  Int      @id @default(autoincrement())
  postId Int
  id     String
  likeAt DateTime @default(now())
  post   Post     @relation(references: [postId], fields: [postId], onDelete: Cascade, onUpdate: Cascade)
  user   User     @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([postId])
  @@index([id])
}

// 2-5. 투표 & 후보 & 투표대상
model Vote {
  voteId     Int         @id @default(autoincrement())
  title      String      @unique
  startAt    DateTime    @db.Date
  finishAt   DateTime    @db.Date
  reChoice   Boolean     @default(false)
  candidates Candidate[]
  userVotes  UserVote[]
}

model Candidate {
  candId   Int        @id @default(autoincrement())
  voteId   Int
  vote     Vote       @relation(references: [voteId], fields: [voteId], onDelete: Cascade, onUpdate: Cascade)
  name     String
  fileId   Int?
  file     File?      @relation(references: [fileId], fields: [fileId], onDelete: Cascade, onUpdate: Cascade)
  UserVote UserVote[]

  @@index([voteId])
  @@index([fileId])
}

// 2-6. 민원
model Complaint {
  comId    Int        @id @default(autoincrement())
  id       String
  title    String
  category Categories
  comAt    DateTime   @default(now())
  content  String     @db.MediumText
  state    States     @default(YET)
  users    User       @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id])
}

// 2-7. 채팅목록 & 채팅방
model ChattingRoom {
  chatId    Int        @id @default(autoincrement())
  id        String
  createAt  DateTime   @default(now())
  users     User       @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: Cascade)
  chattings Chatting[]

  @@index([id])
}

model Chatting {
  chattingId   Int          @id @default(autoincrement())
  chatId       Int
  sender       String
  msg          String
  sendAt       DateTime     @default(now())
  isRead       Boolean      @default(false)
  chattingRoom ChattingRoom @relation(references: [chatId], fields: [chatId], onDelete: Cascade, onUpdate: Cascade)

  @@index([chattingId])
  @@index([chatId])
}

//--------------------------------------------------
// 3. 관계 스키마
// 3-1. 입주민 - 투표 관계
model UserVote {
  index     Int       @id @default(autoincrement())
  voteId    Int
  id        String
  candId    Int
  candidate Candidate @relation(references: [candId], fields: [candId], onDelete: Cascade, onUpdate: Cascade)
  vote      Vote      @relation(references: [voteId], fields: [voteId], onDelete: Cascade, onUpdate: Cascade)
  user      User      @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([voteId, id])
  @@index([candId])
  @@index([id])
  @@index([voteId])
}

// 3-7. 게시글 - 파일 관계
model PostFile {
  fileId Int  @id
  postId Int
  file   File @relation(references: [fileId], fields: [fileId], onDelete: Cascade, onUpdate: Cascade)
  post   Post @relation(references: [postId], fields: [postId], onDelete: Cascade, onUpdate: Cascade)

  @@index([fileId])
  @@index([postId])
}

//--------------------------------------------------
// 4. 부가 기능 스키마
// 4-1. 알림
model Alarm {
  alertId Int      @id @default(autoincrement())
  title   String
  content String
  alertAt DateTime @default(now())
}

// 4-2. 파일
model File {
  fileId     Int         @id @default(autoincrement())
  src        String
  meta       String?
  postFiles  PostFile[]
  candidates Candidate[]
}

//--------------------------------------------------
// 5. ENUM
// 5-1. 민원 카테고리 [공공시설, 주거공간내 하자, 누수, 동파, 전입/출, 요금관련, 기타]
enum Categories {
  PUBLIC
  FLAW
  LEAK
  FREEZE
  IN_OR_OUT
  FARE
  CAR
  ETC
}

// 5-2. 민원 처리상태 [접수 전, 처리 중, 접수 완료]
enum States {
  YET
  ING
  DONE
}

// 5-4. 성별 [남성, 여성]
enum Gender {
  MALE
  FEMALE
}
